{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addNumber","event","setState","firstNumber","state","target","value","clearNumber","secondNumber","equation","setCalcu","console","log","parseInt","react_default","a","createElement","className","colSpan","type","disabled","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2efcc5e1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state ={\n      firstNumber: '',\n      secondNumber: '',\n      setCalcu: '',\n    }\n  }\n\n  addNumber = (event) =>{\n    this.setState({firstNumber: this.state.firstNumber + event.target.value});\n  }\n\n  clearNumber = (event) =>{\n    this.setState({firstNumber: \"\", secondNumber: \"\"});\n  }\n\n  equation = (event) =>{\n    if(event.target.value !== \"equals\"){\n      this.setState({\n        secondNumber: this.state.firstNumber,\n        firstNumber: '',\n        setCalcu: event.target.value,\n      },() =>{\n        console.log(\"Second Number: \" + this.state.secondNumber);\n        console.log(\"First Number: \" + this.state.firstNumber);\n        console.log(\"Equation: \" + this.state.setCalcu);\n      });\n    }else{\n      switch(this.state.setCalcu){\n\n        case \"divide\":\n          this.setState({\n            firstNumber: parseInt(this.state.secondNumber) / parseInt(this.state.firstNumber),\n          })\n          break;\n\n        case \"plus\":\n          this.setState({\n            firstNumber: parseInt(this.state.secondNumber) + parseInt(this.state.firstNumber),\n          })\n          break;\n\n        case \"minus\":\n          this.setState({\n            firstNumber: parseInt(this.state.secondNumber) - parseInt(this.state.firstNumber),\n          })\n          break;\n\n        case \"multiply\":\n          this.setState({\n            firstNumber: parseInt(this.state.secondNumber) * parseInt(this.state.firstNumber),\n          })\n          break;\n\n        default: \n          break;\n      }\n    }\n    \n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <table>\n          <tbody>\n\n            <tr>\n              <td colSpan=\"4\"><input type=\"text\" value={this.state.firstNumber} disabled/></td>\n            </tr>\n            <tr>\n              <td><button value=\"1\" onClick={this.addNumber}>1</button></td>\n              <td><button value=\"2\" onClick={this.addNumber}>2</button></td>\n              <td><button value=\"3\" onClick={this.addNumber}>3</button></td>\n              <td><button value=\"divide\" onClick={this.equation}>/</button></td>\n            </tr>\n            <tr>\n              <td><button value=\"4\" onClick={this.addNumber}>4</button></td>\n              <td><button value=\"5\" onClick={this.addNumber}>5</button></td>\n              <td><button value=\"6\" onClick={this.addNumber}>6</button></td>\n              <td><button value=\"plus\" onClick={this.equation}>+</button></td>\n            </tr>\n            <tr>\n              <td><button value=\"7\" onClick={this.addNumber}>7</button></td>\n              <td><button value=\"8\" onClick={this.addNumber}>8</button></td>\n              <td><button value=\"9\" onClick={this.addNumber}>9</button></td>\n              <td><button value=\"minus\" onClick={this.equation}>-</button></td>\n            </tr>\n            <tr>\n              <td><button value=\"\" onClick={this.clearNumber}>clear</button></td>\n              <td><button value=\"0\" onClick={this.addNumber}>0</button></td>\n              <td><button value=\"equals\" onClick={this.equation}>=</button></td>\n              <td><button value=\"multiply\" onClick={this.equation}>*</button></td>\n            </tr>\n\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}